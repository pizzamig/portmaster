#!/bin/sh

# external tools manipulation
: "${PKG:="pkg"}"

# common useful definitions
PM_TRUE=0
PM_FALSE=1

# true if the current shell is the parent shell
pm_is_parent() {
	if [ "$$" -eq "$PM_PARENT_PID" ]; then
		return $PM_TRUE
	else
		return $PM_FALSE
	fi
}

# ask the user to type y or n and return properly
# if the user type y or PM_YES, PM_TRUE is returned
# if the user type n or PM_NO, PM_FALSE is returned
# $1 is the default value (affects the output only)
pm_get_yesno() {
	local default answer
	default=$1 ; shift
	[ -n "${PM_YES}" ] && return $PM_TRUE
	[ -n "${PM_NO}" ] && return $PM_FALSE
	while true ; do
		echo -e "$* [${default}] \c"
		read answer
		echo
		case "$answer" in
		[Nn])
			return $PM_FALSE ;;
		[Yy])
			return $PM_TRUE ;;
		'')
			case "$default" in
			[Nn]) return $PM_FALSE ;;
			[Yy]) return $PM_TRUE ;;
			esac
			;;
		*)
			echo -e "\t===>>> $answer is not a valid answer"
		esac
	done
}

pm_mktemp_file() {
	local _temp
	_temp=$(/usr/bin/mktemp -t pm-${PM_PARENT_PID}-$1 2>&1) ||
		fail "mktemp for $1 failed: \n\t${_temp#mktemp: }"
	echo $_temp
	TEMP_FILE_LIST="${TEMP_FILE_LIST}${_temp} "
}

# removing trailing glob chars
pm_globstrip () {
	local in
	in=${1%[*]}
	in=${in%\\}
	echo $in
}

# Takes a pkg pattern as input( bash, perl, ...) ; return values
# 0 - Matched one and only one package
# 1 - No match
# 2 - Matched multiple packages
# The variabl glob_pkgs will contain the package names
pm_find_glob_pkgs () {
	# Global glob_pkgs
	local pattern num
	pattern="$(pm_globstrip $1)"
	num=$(pkg info -g ${pattern}\* | wc -l | tr -d " ")
	glob_pkgs="$(pkg query -g "%n-%v" ${pattern}\*)"
	case $num in
	0) unset glob_pkgs; return 1 ;;
	1) return 0 ;;
	*) return 2 ;;
	esac
}

# get the origin from a pkg name [name-version]; return values
# 0 - package found
# 1 - package not found
# 2 - package ignored using as +IGNOREME
#     (pdb has to be correctly initialized)
# 3 - bsdpan package (a relics)
pm_get_origin () {
	if [  -e "$pdb/$1/+IGNOREME" ]; then
		echo "  ===>>> $pdb/$1/+IGNOREME exists" >&2
		return 2
	fi
	pkg query '%o' $1 2>/dev/null && return 0
	case "$1" in bsdpan-*) return 3 ;; esac
	return 1
}

# former iport_from_origin | TODO to be adopted | TODO to be tested
# get the installed pkg name [name-version] from an origin; it echos the installed version
# return values
# 0 - package found
# 1 - package not found
# 2 - multiple packages [TODO: check with subpackages and flavor]
pm_get_inst_pkgname () {
	local num rc
	num=$( pkg query -e "%o = ${1}" '%n-%v' | wc -l | tr -d " " )
	case $num in
	0) return 1 ;;
	1) rc=0 ;;
	*) rc=2 ;;
	esac
	pkg query -e "%o = ${1}" '%n-%v'
	return rc
}

# look for moved ports origin
# get the new origin or the reason why it's deleted
# reqs: $pd
# return values
# 0 - origin not found
# 1 - ports moved to another origin
# 2 - ports removed
pm_find_moved_origin () {
	local origin newOrigin reason
	origin=$1
	if [ -n "$(grep "^${origin}||" $pd/MOVED)" ]; then
		# ports removed
		reason=$(grep "^${origin}||" $pd/MOVED | sed "s%^.*||.*|%%")
		echo $reason
		return 2
	fi
	if [ "$(grep -c "^${origin}|" $pd/MOVED)" -eq 1 ]; then
		# ports moved to another origin
		newOrigin=$(grep "^${origin}|" $pd/MOVED | sed "s%^${origin}|%%")
		reason=$(echo $newOrigin | sed "s%.*|.*|%%")
		origin=${newOrigin%%|*}
		newOrigin=$(pm_find_moved_origin $origin)
		case $? in
		0) echo $origin
			return 1 ;;
		1) echo $newOrigin
			return 1 ;;
		2) echo $newOrigin
			return 2 ;;
		esac
	fi
	return 0
}

# get the distfiles from a pkg name, using the portstree
pm_get_distfiles () {
	local origin
	origin="$(pm_get_origin $1)"
	if [ ! -d $pd/$origin ]; then
		# check the moved ports
		origin=$(pm_find_moved_origin $origin)
		case $? in
		0|2) return ;;
		esac
	fi
	if [ -s $pd/$origin/distinfo ]; then
		fgrep SIZE $pd/$origin/distinfo | sed 's/^SIZE (//g' | sed 's/) =.*$//g'
	fi
}

# --clean-distfiles ; no arguments needed
# reqs:    $pd and $DISTDIR
# options: $PM_THOROUGH, $PM_YES, $PM_NO
pm_clean_distfiles () {
	local DI_FILES
	[ -n "$DISTDIR" ] || fail 'DISTDIR is not defined'
	DI_FILES=$(pm_mktemp_file DISTINFO)
	echo "===>>> Gathering distinfo list for installed ports"
	if [ -n "$PM_THOROUGH" ]; then # [ -t ]
		# get the list of distfiles needed by the whole portstree
		for _distinfo in $pd/*/*/distinfo
		do
			fgrep SIZE "$_distinfo" | sed 's/^SIZE (//g' | sed 's/) =.*$//g'
		done > $DI_FILES
	else
		# get the list of distfiles needed by the installed pkgs
		for _pkg in $( pkg query '%n-%v' ) ; do
			pm_get_distfiles $_pkg
		done > $DI_FILES
	fi
	# get the list of distfiles stored in the system and
	# remove distfiles not related to installed pkgs
	echo "===>>> Checking for stale distfiles" ; echo ''
	for _dif in $(find -s $DISTDIR -type f) ; do
		__dif=${_dif#$DISTDIR}
		if ! grep -sql ^$__dif $DI_FILES; then
			pm_get_yesno n "\t===>>> Delete stale file: $__dif"
			case "$?" in
			$PM_TRUE)
				echo -e "\tDeleting $__dif"
				/bin/unlink $__dif ;;
			*)
				continue ;;
			esac
		fi
	done
	# TODO: remove empty directories under /usr/ports/distfiles
	# TODO: clean temporary files and exit
}
